image: cc_image:latest
cache:
  paths:
    - images

stages:
  - image
  - test
  - deploy



build_singularity_image_py27:
  stage: image
  script:
    - yum install squashfs-tools -y
    - mkdir images -p
    - rm -f images/cc_py27.simg
    - singularity build images/cc_py27.simg container/singularity/cc_py27.def
  cache:
    paths:
      - images
  only:
    changes:
      - container/singularity/cc_py27.def

build_singularity_image_py36:
  stage: image
  script:
    - yum install squashfs-tools -y
    - mkdir images -p
    - rm -f images/cc_py36.simg
    - singularity build images/cc_py36.simg container/singularity/cc_py36.def
  cache:
    paths:
      - images
  only:
    changes:
      - container/singularity/cc_py36.def

build_singularity_image_py27_lite:
  stage: image
  script:
    - yum install squashfs-tools -y
    - mkdir images -p
    - rm -f images/cc_py27_lite.simg
    - singularity build images/cc_py27_lite.simg container/singularity/cc_py27_lite.def
  cache:
    paths:
      - images
  only:
    changes:
      - container/singularity/cc_py27_lite.def



python_2.7.10:
  stage: test
  script:
    - ls -l
    - SINGULARITYENV_PYTHONPATH=/test/package singularity exec --cleanenv -B $PWD:/test images/cc_py27.simg which python
    - SINGULARITYENV_PYTHONPATH=/test/package singularity exec --cleanenv -B $PWD:/test images/cc_py27.simg make -C /test/package test
  cache:
    paths:
      - images

python_3.6.8:
  stage: test
  script:
    - ls -l
    - SINGULARITYENV_PYTHONPATH=/test/package singularity exec --cleanenv -B $PWD:/test images/cc_py36.simg which python
    - SINGULARITYENV_PYTHONPATH=/test/package singularity exec --cleanenv -B $PWD:/test images/cc_py36.simg make -C /test/package test
  cache:
    paths:
      - images

python_2.7.10_lite:
  stage: test
  script:
    - ls -l
    - SINGULARITYENV_PYTHONPATH=/test/package singularity exec --cleanenv -B $PWD:/test images/cc_py27_lite.simg which python
    - SINGULARITYENV_PYTHONPATH=/test/package singularity exec --cleanenv -B $PWD:/test images/cc_py27_lite.simg make -C /test/package test
  cache:
    paths:
      - images


devpi_prod:
  stage: deploy
  script:
    - conda update -c anaconda setuptools
    - pip install devpi-client
    - devpi use http://devpi.sbnb.org:3141
    - devpi login gitlab --password='sbnb'
    - devpi use root/prod
    - cd package
    - devpi upload
    - devpi push chemicalchecker==$CI_COMMIT_TAG root/prod
  only:
    - tags

devpi_dev:
  stage: deploy
  script:
    - conda update -c anaconda setuptools
    - pip install devpi-client
    - devpi use http://devpi.sbnb.org:3141
    - devpi login gitlab --password='sbnb'
    - devpi use root/dev
    - cd package
    - devpi upload
    - devpi push chemicalchecker==0.1.0 root/dev

pages:
  stage: deploy
  artifacts:
    paths:
    - public
  cache:
    paths:
      - images
  script:
    - SINGULARITYENV_PYTHONPATH=/test/package singularity exec --cleanenv -B $PWD:/test images/cc_py27.simg make -C /test/package docs
    - cd package/docs
    - mv _build/html/ ../../public/
    - ls -l ../../public
  only:
    - master


Wiki2PDF: 
  # version : 1.4.2
  # License : MIT
  #  Author : Andrea Ligios

  image: ubuntu:latest

  variables:
    SCRIPT_VERSION: "1.4.2"
    
    # Details of your self-hosted Gitlab's installation? 
    # Considering "https://foo.bar/" GITLAB_DOMAIN is "foo.bar".
    #GITLAB_DOMAIN: "foo.bar"
    GITLAB_DOMAIN: "gitlab.com"
    
    # Considering "https://foo.bar/" GITLAB_SCHEME is "https".
    #GITLAB_SCHEME: "http"
    GITLAB_SCHEME: "https"    
    
    # Subfolders separator, used to separate path entries in generated file names, eg /foo/bar/baz.md -> ./foo@bar@baz.pdf
    SEPARATOR: "@"
    #SEPARATOR: "-"
    #SEPARATOR: "_"

  only:
    # Wiki2PDF will run only when triggered by a Webhook...:
    - triggers
    # ... or after pressing the "Run Pipeline" button on Pipelines page:
    - web

  artifacts:
    # These are the files you then download after the job has finished.
    untracked: true

  script:
    # It's necessary to clone the WIKI which is a separate repository.
    - git clone ${GITLAB_SCHEME}://gitlab-ci-token:${CI_BUILD_TOKEN}@${GITLAB_DOMAIN}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.wiki.git
    # We'll also need to download the attached resources (eg. images), which are stored in an unaccessible /uploads folder,
    # so that during the PDF conversion, the relatively /uploads files referenced by the .md files will be accessible.

    - mkdir -p wiki/source/uploads
    - cd ${CI_PROJECT_NAME}.wiki
    - mkdir tmp
    - mkdir http
    
    ########################################
    #     WIKI IMAGES - MARKDOWN FILES     #
    ########################################
    - |
      if [ "$(grep -Roh --include '*.md' '!\[.*](/uploads/[^\)]*' .)" == "" ]; then 
         echo "No Wiki resources to download"
      else
        # Matching only markdown images "![]()" (not markdown URLs like "[]()")
        grep -Roh --include '*.md' '!\[.*](/uploads/[^\)]*' . > tmp/tmp-wiki-md-1.txt
        
